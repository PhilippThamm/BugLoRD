for ( final String pfx : hex_prefixes ) { <_con_end_> if ( str . startsWith ( pfx ) ) {
static Integer createInteger ( final String str ) { <_con_end_> if ( str == null ) {
, "-#" } ; int pfxLen = 0 ; <_con_end_> for ( final String pfx : hex_prefixes ) {
{ pfxLen += pfx . length ( ) ; <_con_end_> break ;
( str . startsWith ( pfx ) ) { <_con_end_> pfxLen += pfx . length ( ) ;
. valueOf ( ( byte ) 0 ) ; <_con_end_> public static final Byte BYTE_ONE = Byte . valueOf ( ( byte ) 1 ) ;
. valueOf ( ( byte ) 1 ) ; <_con_end_> public static final Byte BYTE_MINUS_ONE = Byte . valueOf ( ( byte ) - 1 ) ;
. lang3 . StringUtils ; public class NumberUtils { <_con_end_> public static final Long LONG_ZERO = Long . valueOf ( 0L ) ;
valueOf ( ( byte ) - 1 ) ; <_con_end_> public static final Double DOUBLE_ZERO = Double . valueOf ( 0 . 0d ) ;
LONG_ZERO = Long . valueOf ( 0L ) ; <_con_end_> public static final Long LONG_ONE = Long . valueOf ( 1L ) ;
LONG_ONE = Long . valueOf ( 1L ) ; <_con_end_> public static final Long LONG_MINUS_ONE = Long . valueOf ( - 1L ) ;
. valueOf ( ( short ) 1 ) ; <_con_end_> public static final Short SHORT_MINUS_ONE = Short . valueOf ( ( short ) - 1 ) ;
( final CharSequence cs ) { int strLen ; <_con_end_> if ( cs == null || ( strLen = cs . length ( ) ) == 0 ) {
valueOf ( ( short ) - 1 ) ; <_con_end_> public static final Byte BYTE_ZERO = Byte . valueOf ( ( byte ) 0 ) ;
str == null ) { return null ; } <_con_end_> if ( StringUtils . isBlank ( str ) ) {
{ throw new NumberFormatException ( "A_blank_string_is_not_a_valid_number" ) ; } <_con_end_> final String [ ] hex_prefixes = { "0x" , "0X" , "-0x" , "-0X" , "#" , "-#" } ;
"-0x" , "-0X" , "#" , "-#" } ; <_con_end_> int pfxLen = 0 ;
; private static final int PAD_LIMIT = 8192 ; <_con_end_> private static final Pattern WHITESPACE_PATTERN = Pattern . compile ( "(?:_\\s|[\\s&&[^_]])\\s*" ) ;
) { return createBigInteger ( str ) ; } <_con_end_> if ( hexDigits > 8 ) {
) { return createLong ( str ) ; } <_con_end_> return createInteger ( str ) ;
createNumber ( final String str ) throws NumberFormatException { <_con_end_> if ( str == null ) {
. valueOf ( - 1 . 0d ) ; <_con_end_> public static final Float FLOAT_ZERO = Float . valueOf ( 0 . 0f ) ;
INTEGER_ZERO = Integer . valueOf ( 0 ) ; <_con_end_> public static final Integer INTEGER_ONE = Integer . valueOf ( 1 ) ;
Float . valueOf ( 0 . 0f ) ; <_con_end_> public static final Float FLOAT_ONE = Float . valueOf ( 1 . 0f ) ;
INTEGER_ONE = Integer . valueOf ( 1 ) ; <_con_end_> public static final Integer INTEGER_MINUS_ONE = Integer . valueOf ( - 1 ) ;
Float . valueOf ( 1 . 0f ) ; <_con_end_> public static final Float FLOAT_MINUS_ONE = Float . valueOf ( - 1 . 0f ) ;
= Integer . valueOf ( - 1 ) ; <_con_end_> public static final Short SHORT_ZERO = Short . valueOf ( ( short ) 0 ) ;
) == 0 ) { return true ; } <_con_end_> for ( int i = 0 ; i < strLen ; i ++ ) {
. valueOf ( ( short ) 0 ) ; <_con_end_> public static final Short SHORT_ONE = Short . valueOf ( ( short ) 1 ) ;
; i < strLen ; i ++ ) { <_con_end_> if ( Character . isWhitespace ( cs . charAt ( i ) ) == false ) {
charAt ( i ) ) == false ) { <_con_end_> return false ;
Double . valueOf ( 0 . 0d ) ; <_con_end_> public static final Double DOUBLE_ONE = Double . valueOf ( 1 . 0d ) ;
Double . valueOf ( 1 . 0d ) ; <_con_end_> public static final Double DOUBLE_MINUS_ONE = Double . valueOf ( - 1 . 0d ) ;
= Long . valueOf ( - 1L ) ; <_con_end_> public static final Integer INTEGER_ZERO = Integer . valueOf ( 0 ) ;
str == null ) { return null ; } <_con_end_> return Integer . decode ( str ) ;
} } if ( pfxLen > 0 ) { <_con_end_> final int hexDigits = str . length ( ) - pfxLen ;
. length ( ) ; break ; } } <_con_end_> if ( pfxLen > 0 ) {
= str . length ( ) - pfxLen ; <_con_end_> if ( hexDigits > 16 ) {
