package se.de.hu_berlin.informatik.spectra.provider.tracecobertura.data;

import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.util.CheckClassAdapter;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

public class DetectIgnoredCodeClassVisitor extends ClassVisitor {
    /**
     * set of ignored line IDs
     */
    private final Set<Integer> ignoredLineIds = new HashSet<>();

    /**
     * Set of concatenated methodName and methodSignature that should be ignored
     */
    private final Set<String> ignoredMethodNamesAndSignatures = new HashSet<>();

    /**
     * Name (internal asm) of currently processed class
     */
    private String className;

    /**
     * Name (internal asm) of parent of processed class
     */
    private String superName;

    /**
     * Every LINENUMBER instruction will have generated it's lineId.
     * <p>
     * The generated ids must be the same as those generated by ( {@link AbstractFindTouchPointsClassInstrumenter#lineIdGenerator} )
     */
    private final AtomicInteger lineIdGenerator = new AtomicInteger(0);

    private final boolean ignoreTrivial;
    private final Set<String> ignoreAnnotations;

    public DetectIgnoredCodeClassVisitor(ClassVisitor cv,
                                         boolean ignoreTrivial, Set<String> ignoreAnnotations) {
        super(Opcodes.ASM4, new CheckClassAdapter(cv, false));
        this.ignoreTrivial = ignoreTrivial;
        this.ignoreAnnotations = ignoreAnnotations;
    }

    @Override
    public void visit(int version, int access, String name, String signature,
                      String superName, String[] interfaces) {
        super.visit(version, access, name, signature, superName, interfaces);
        this.className = name;
        this.superName = superName;
    }

    @Override
    public MethodVisitor visitMethod(int access, String methodName,
                                     String description, String signature, String[] exceptions) {
        MethodVisitor nestedVisitor = super.visitMethod(access, methodName,
                description, signature, exceptions);
        return new DetectIgnoredCodeMethodVisitor(nestedVisitor,
                ignoredLineIds, ignoredMethodNamesAndSignatures, ignoreTrivial,
                ignoreAnnotations, className, superName, methodName,
                description, lineIdGenerator);
    }

    public Set<Integer> getIgnoredLineIds() {
        return ignoredLineIds;
    }

    public Set<String> getIgnoredMethodNamesAndSignatures() {
        return ignoredMethodNamesAndSignatures;
    }
}
